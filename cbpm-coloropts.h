/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (cbpm-coloropts.h)
 *  
 *  It has been AutoGen-ed  Thursday January 10, 2002 at 03:50:38 PM CET
 *  From the definitions    cbpm-coloropts.def
 *  and the template file   options
 */

/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the cbpmcolor program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */

#ifndef CBPMCOLOR_CBPM_COLOROPTS_H
#define CBPMCOLOR_CBPM_COLOROPTS_H

#include <options.h>

/*
 *  Enumeration of each option:
 */
typedef enum {
        INDEX_OPT_NOCOPYRIGHT      =  0,
        INDEX_OPT_VERBOSE          =  1,
        INDEX_OPT_TO               =  2,
        INDEX_OPT_FROM             =  3,
        INDEX_OPT_WRITETO          =  4,
        INDEX_OPT_HELP             = 5,
        INDEX_OPT_MORE_HELP        = 6
} teOptIndex;

#define OPTION_CT    7

/*
 *  Interface defines for all options.  Replace "n" with
 *  the UPPER_CASED option name (as in the teOptIndex
 *  enumeration above).  e.g. HAVE_OPT( NOCOPYRIGHT )
 */
#ifdef __STDC__
#define     DESC(n)     cbpmcolorOptions.pOptDesc[INDEX_OPT_ ## n]
#else
#define     DESC(n)     cbpmcolorOptions.pOptDesc[INDEX_OPT_/**/n]
#endif
#define     HAVE_OPT(n) (! UNUSED_OPT(&DESC(n)))
#define      OPT_ARG(n) (DESC(n).pzLastArg)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT;   \
                if ( (DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = (void*)NULL )

/*
 *  Interface defines for specific options.
 */
#define VALUE_OPT_NOCOPYRIGHT    'q'
#define VALUE_OPT_VERBOSE        'v'
#define VALUE_OPT_TO             't'
#define OPT_VALUE_TO             (*(long*)(&OPT_ARG(TO)))
#define VALUE_OPT_FROM           'f'
#define OPT_VALUE_FROM           (*(long*)(&OPT_ARG(FROM)))
#define VALUE_OPT_WRITETO        'w'

#define VALUE_OPT_HELP           '?'
#define VALUE_OPT_MORE_HELP      '!'

/*
 *  Interface defines not associated with particular options
 */
#define  ERRSKIP_OPTERR STMTS( cbpmcolorOptions.fOptSet &= ~OPTPROC_ERRSTOP )
#define  ERRSTOP_OPTERR STMTS( cbpmcolorOptions.fOptSet |= OPTPROC_ERRSTOP )
#define  RESTART_OPT(n) STMTS( \
                cbpmcolorOptions.curOptIdx = (n); \
                cbpmcolorOptions.pzCurOpt  = (char*)NULL )
#define    START_OPT    RESTART_OPT(1)
#define     USAGE(c)    (*cbpmcolorOptions.pUsageProc)( &cbpmcolorOptions, c )

/* * * * * *
 *
 *  Declare the cbpmcolor option descriptor.
 */
#ifdef  __cplusplus
extern "C" {
#endif

extern tOptions   cbpmcolorOptions;

#ifdef  __cplusplus
}
#endif
#endif /* CBPMCOLOR_CBPM_COLOROPTS_H */
