AR = ar
bin: $(BIN)
include .depend

%.o: %.cpp
	@echo "  [cpp] "$@
	@$(CPP) -c $< $(CFLAGS) -o $@ $(QT_INCLUDE_PATH)

%.moc.cpp: %.h
	@echo "  [moc] "$@
	@$(MOC) -o $@ $<

%.ogg: %.wav
	@echo "  [ogg] "$@
	@oggenc $< >/dev/null 2>/dev/null

%.mp3: %.wav
	@echo "  [mp3] "$@
	@lame $< $@ >/dev/null 2>/dev/null

%.flac: %.wav
	flac $<

# BpmDj contains a number of embedded files. Instead of loading images as huge
# pixmaps that require runtime parsing, we insert the .png and .mp3 files 
# straight into the data segment of the program.
# Depending on the architectrue we need different parameters
ifeq	($(BITS),64)
OBJCOPYPARMS=-B i386:x86-64 -O elf64-x86-64
else
OBJCOPYPARMS=-B i386 -O elf32-i386 
endif

%-ogg.o: %.ogg
	@echo "  [obj] "$@
	@objcopy -I binary $(OBJCOPYPARMS)\
		 --rename-section .data=.rodata,alloc,load,readonly,data,contents \
		 $< $@

%-mp3.o: %.mp3
	@echo "  [obj] "$@
	@objcopy -I binary $(OBJCOPYPARMS) \
		 --rename-section .data=.rodata,alloc,load,readonly,data,contents \
		 $< $@

%-png.o: %.png
	@echo "  [obj] "$@ 
	@objcopy -I binary $(OBJCOPYPARMS) \
		--rename-section .data=.rodata,alloc,load,readonly,data,contents \
		 $< $@

DATA_OBJECTS = data.o data-lexer.o data-syntax.o data-io.o \
        data-visitor.o array-creator.o symbol.o data-token.o data-string.o \
        null.o set.o
data.a : $(DATA_OBJECTS)
	@echo "   [ar] data.a"
	@$(AR) r $@ $(DATA_OBJECTS) 2>.ignore

DSP_OBJECTS = dsp-drivers.o dsp-oss.o dsp-alsa.o dsp-none.o dsp-jack.o
dsp.a : $(DSP_OBJECTS)
	@echo "   [ar] dsp.a"
	@$(AR) r $@ $(DSP_OBJECTS) 2>.ignore

EMBEDDED = bpmdj-ogg.o bpmdj-mp3.o embedded-files.o logo-png.o
embedded.a: $(EMBEDDED)
	@echo "   [ar] embedded.a"
	@$(AR) r $@ $(EMBEDDED) 2>.ignore

ANALYZERS = analyzer.o \
 	beatgraph-label.o beatgraph-label.moc.o \
        beatgraph-analyzer.o beatgraph-analyzer.moc.o \
	bpm-analyzer.o bpm-analyzer.moc.o \
	spectrum-analyzer.o spectrum-analyzer.moc.o \
	rythm-analyzer.o rythm-analyzer.moc.o \
	wavelet-analyzer.o md5-analyzer.o energy-analyzer.o
analyzers.a: $(ANALYZERS)
	@echo "   [ar] analyzers.a"
	@$(AR) r $@ $(ANALYZERS) 2>.ignore

KPLAY_OBJECTS = about.moc.o memory.o power-type.o files.o \
	player.moc.o player.o constants.o \
	sample4-type.o player-core.o spectrum-type.o \
 	song-information.o song-information.moc.o \
	pca.o capacity.o index.o bpmplay.o signals.o \
	player-config.o data.a capacity-checker.o types.o dsp.a \
	embedded.a efence.o page.o rc-player.o \
	efence-print.o analyzers.a histogram-type.o common.o scripts.o bpm.o

BPM_LIB = bpm.o memory.o	
BPMCOUNT_OBJECTS = bpmcount.o files.o signals.o bpm.a 

KCOUNT_OBJECTS = index.o kbpm-count.o \
	kbpm-count.moc.o scripts.o merger.o

FRAGMENTS = fragment-player.o fragment-cache.o fragment.o fragment-creator.o
ACTIVE_OBJECTS = ao-scheduler.o lock.o
KSEL_OBJECTS = ao-tracker.o qstring-factory.o tags.o about.moc.o capacity.o \
	renamerstart.o renamerstart.moc.o \
	heap.o pixmap-cache.o song-process.o song-process.moc.o spectrum-type.o \
	scripts.o cluster.o pca.o \
	histogram-type.o qvectorview.o qvectorview.moc.o freq-mapping.o \
	freq-mapping.moc.o memory.o analyzer.o \
	types.o config.moc.o existence-scanner.o player-config.o song-information.o\
	song-information.moc.o sample4-type.o music-scanner.o \
	music-scanner.moc.o power-type.o analyzers-manager.o\
	basic-process-manager.o spectrum-pca.o user-notification.o database.o \
	dirscanner.o efence.o page.o efence-print.o \
	selector.o selector.moc.o constants.o \
	process-manager.o $(FRAGMENTS) $(ACTIVE_OBJECTS) \
	dsp.a bpmdj-pref.o bpmdj-pref.moc.o \
	song.o qsong.o queuedsong.o historysong.o signals.o\
	index-reader.o index.o history.o albumitem.o files.o \
	bpmdj.o edit-distance.o renamer.o renamer.moc.o \
	renamer.logic.o renamer.logic.moc.o \
	config.o common.o \
	statistics.o statistics.moc.o song-metric.o \
	cluster-dialog.o cluster-dialog.moc.o \
	log-viewer.o log-viewer.moc.o data.a embedded.a ao-pool.o 

MERGER_OBJECTS = bpmmerge.o index.o common.o scripts.o song-information.o \
	song-information.moc.o capacity.o \
	types.o player-config.o efence.o page.o efence-print.o memory.o \
	sample4-type.o power-type.o spectrum-type.o signals.o files.o \
	histogram-type.o data.a

bpmplay: $(KPLAY_OBJECTS)
	@echo " [link] "$@
	@$(LINK) $(KPLAY_OBJECTS) -o bpmplay

bpmcount: $(BPMCOUNT_OBJECTS)
	@echo " [link] "$@
	@$(LINK) $(BPMCOUNT_OBJECTS) -o bpmcount

bpm.a:  $(BPM_LIB)
	@echo "   [ar] "$@
	@$(AR) r $@ $(BPM_LIB) >/dev/null 2>/dev/null 

bpmdj: $(KSEL_OBJECTS) 
	@echo " [link] "$@
	@$(LINK) $(KSEL_OBJECTS) -o bpmdj

profile-clock: profile-clock.o
	@echo " [link] "$@
	@$(CPP) $(LDFLAGS) profile-clock.o -o profile-clock

bpmmerge: $(MERGER_OBJECTS)
	@echo " [link] "$@
	@$(LINK)  $(MERGER_OBJECTS) -o bpmmerge
