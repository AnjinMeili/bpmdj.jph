HEADERS = ${shell ls *.h++ 2>/dev/null | grep -v .*\.L.h++ 2>/dev/null}
SOURCES = ${shell ls *.c++ 2>/dev/null | grep -v .*\.L.c++ 2>/dev/null}
B4      = ${shell ls *.b4  2>/dev/null | grep -v .*\.L.c++ 2>/dev/null}
DO      = ${shell ls *.do  2>/dev/null | grep -v .*\.L.c++ 2>/dev/null}

.PHONY:.sources .cflags
.sources: version.h $(HEADERS:%.h++=%.h) $(SOURCES:%.c++=%.cpp) $(B4:%.b4=%.h) $(DO:%.do=%.h) \
	data-lexer.cpp data-syntax.h data-syntax.cpp .cflags
	@cat .cflags >/tmp/t
	@grep "#include\ *\"" *.h *.cpp >>/tmp/t
	@if ! [ -e .sources ]; then cp /tmp/t .sources; fi
	@if ! cmp /tmp/t .sources >/dev/null; then mv /tmp/t .sources; fi

.cflags:
	@echo $(VERSION) >/tmp/t
	@echo $(CFLAGS) >>/tmp/t
	@echo $(CPP) >>/tmp/t
	@if ! [ -e .cflags ]; then cp /tmp/t .cflags; touch *.h *.c; fi
	@if ! cmp /tmp/t .cflags >/dev/null; then mv /tmp/t .cflags; touch *.h *.cpp; fi

%.h: %.b4 aoc
	@echo "  [aoc] "$@
	@./aoc $< $@

%.h: %.do doc
	@echo "  [doc] "$@
	@./doc --noaccess $< $@

# The .h and .cpp sources are generated from corresponding .h++ and .c++ 
# sources. This allows us to automatically prefix a copyright header, 
# precompile specific constructs (iterators) and ensure that each header file
# will be loaded only once
%.h: %.h++ header.txt ++2--
	@echo "  [h++] "$@
	@"++2--" $< $@

%.cpp: %.c++ header.txt ++2--
	@echo "  [c++] "$@
	@"++2--" $< $@

%.o: %.cpp
	@echo "  [cpp] "$@
	@$(CPP) -c $< $(CFLAGS) -o $@ $(QT_INCLUDE_PATH)

aoc: ao-syntax.o ao-lexer.o aoc.o sao-printer.o
	@echo " [link] "$@
	@$(LINK) $(CFLAGS) $^ -o $@


doc: do-syntax.o do-lexer.o doc.o do-printer.o doc.o
	@echo " [link] "$@
	@$(LINK) $(CFLAGS) $^ -o $@		

fixname: fixname.o
	@echo " [link] "$@
	@$(LINK) $(CFLAGS) $< -o $@

profile-clock: profile-clock.o
	@echo " [link] "$@
	@$(LINK) $(CFLAGS) $< -o $@

version.h: profile-clock
	@echo " [test] clock - 10 seconds"
	@echo "#define VERSION \""$(VERSION)"\"" >version.h
	@./profile-clock >>version.h

data-lexer.cpp: data-lexer.l data-syntax.h
	@echo " [flex] data-lexer.cpp"
	@flex -odata-lexer.cpp data-lexer.l

data-syntax.h: data-syntax.y
	@echo "[bison] data-syntax.h data-syntax.cpp"
	@bison --defines=data-syntax.h --output-file=data-syntax.cpp data-syntax.y

data-syntax.cpp: data-syntax.y
	@$(ECHO) "[bison] data-syntax.h data-syntax.cpp"
	@bison --defines=data-syntax.h --output-file=data-syntax.cpp data-syntax.y

