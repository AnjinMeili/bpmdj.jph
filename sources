HEADERS = ${shell ls *.h++ 2>/dev/null | grep -v .*\.L.h++ 2>/dev/null}
SOURCES = ${shell ls *.c++ 2>/dev/null | grep -v .*\.L.c++ 2>/dev/null}
B4      = ${shell ls *.b4  2>/dev/null | grep -v .*\.L.c++ 2>/dev/null}

.PHONY:.sources
.sources: version.h $(HEADERS:%.h++=%.h) $(SOURCES:%.c++=%.cpp) $(B4:%.b4=%.h) \
	data-lexer.cpp data-syntax.h data-syntax.cpp
	@grep "#include\ *\"" *.h *.cpp >/tmp/t
	@if test ! -e .sources; then cp /tmp/t .sources; fi
	@if ! [ -e .sources ]; then cp /tmp/t .sources; fi
	@if ! cmp /tmp/t .sources >/dev/null; then mv /tmp/t .sources; fi

%.h: %.b4 aoc
	@echo "  [aoc] "$@
	@./aoc $< $@

# The .h and .cpp sources are generated from corresponding .h++ and .c++ 
# sources. This allows us to automatically prefix a copyright header, 
# precompile specific constructs (iterators) and ensure that each header file
# will be loaded only once
%.h: %.h++ fixname header.txt
	@echo "  [h++] "$@
	@chmod +w $@ 2>/dev/null; exit 0 
	@cat <header.txt >$@
	@echo "#ifndef `fixname $<`" >>$@
	@echo "#define `fixname $<`" >>$@
	@echo "using namespace std;" >>$@
	@echo "#line 1 \"$<\"" >>$@
	@itc $< >>$@
	@echo "#endif" >>$@
	@chmod -w $@ 2>/dev/null; exit 0

%.cpp: %.c++
	@echo "  [c++] "$@
	@chmod +w $@ 2>/dev/null; exit 0 
	@cat <header.txt >$@
	@echo "using namespace std;" >>$@
	@echo "#line 1 \"$<\"" >>$@
	@itc <$< >>$@
	@chmod -w $@ 2>/dev/null; exit 0 

%.o: %.cpp
	@echo "  [cpp] "$@
	@$(CPP) -c $< $(CFLAGS) -o $@ $(QT_INCLUDE_PATH)

fixname: fixname.o
	@echo " [link] "$@
	@$(LINK) $(CFLAGS) $< -o $@

version.h: profile-clock
	@echo " [test] clock"
	@echo "#define VERSION \""$(VERSION)"\"" >version.h
	@./profile-clock >>version.h

data-lexer.cpp: data-lexer.l data-syntax.h
	@echo " [flex] data-lexer.cpp"
	@flex -odata-lexer.cpp data-lexer.l

data-syntax.h: data-syntax.y
	@echo "[bison] data-syntax.h data-syntax.cpp"
	@bison --defines=data-syntax.h --output-file=data-syntax.cpp data-syntax.y

data-syntax.cpp: data-syntax.y
	@$(ECHO) "[bison] data-syntax.h data-syntax.cpp"
	@bison --defines=data-syntax.h --output-file=data-syntax.cpp data-syntax.y

